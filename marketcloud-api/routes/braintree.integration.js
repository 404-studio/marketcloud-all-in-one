'use strict'

var express = require('express')
var router = express.Router()
var braintree = require('braintree')
var Errors = require('../models/errors.js')
var Cipher = require('../libs/cipher.js')
var Utils = require('../libs/util.js')

// Middleware
var setupBraintreeGateway = function (req, res, next) {
  // Controlla che l'integrazione sia attiva
  //
  // Prendere i dati dal db.
  // usarli nel gateway
  //

  var mongodb = req.app.get('mongodb')

  mongodb.collection('applications_integrations')
    .findOne({
      application_id: req.client.application_id
    }, function (err, document) {
      if (err) {
        return next(err)
      }
      if (document === null || !document.hasOwnProperty('braintree')) {
        return res.status(404).send({
          status: false,
          errors: [new Errors.NotFound('Unable to find application metadata for application with id ' + req.client.application_id + '. Ensure that the Braintree integration is active and configured properly.')]
        })
      }

      if (document.braintree.isActive !== true) {
        return res.status(400).send({
          status: false,
          errors: [new Errors.BadRequest('Braintree integration is not active. You must activate it first. You can do it from the Dashboard.')]
        })
      }

      var cipher = new Cipher()

      // Making sure that every key is correctly populated

      if (typeof document.braintree.merchantId !== 'string' || document.braintree.merchantId.length === 0) { return next(new Errors.BadRequest('The Braintree integration is misconfigured, please ensure that the Braintree merchantId is correctly set at https://marketcloud.studio404.net/applications/' + req.client.application_id + '/dashboard#/integrations/braintree')) }

      if (typeof document.braintree.publicKey !== 'string' || document.braintree.publicKey.length === 0) { return next(new Errors.BadRequest('The Braintree integration is misconfigured, please ensure that the Braintree publicKey is correctly set at https://marketcloud.studio404.net/applications/' + req.client.application_id + '/dashboard#/integrations/braintree')) }

      if (typeof document.braintree.privateKey !== 'string' || document.braintree.privateKey.length === 0) {
        return next(new Errors.BadRequest('The Braintree integration is misconfigured, please ensure that the Braintree privateKey is correctly set at https://marketcloud.studio404.net/applications/' + req.client.application_id + '/dashboard#/integrations/braintree'))
      }

      var decryptedMerchantId = cipher.decrypt(document.braintree.merchantId)
      var decryptedPublicKey = cipher.decrypt(document.braintree.publicKey)
      var decryptedPrivateKey = cipher.decrypt(document.braintree.privateKey)

      var braintreeEnvironment = null

      if (document.braintree.environment === 'Production') {
        braintreeEnvironment = braintree.Environment.Production
      } else {
        braintreeEnvironment = braintree.Environment.Sandbox
      }

      var gateway = braintree.connect({
        environment: braintreeEnvironment,
        merchantId: decryptedMerchantId,
        publicKey: decryptedPublicKey,
        privateKey: decryptedPrivateKey
      })

      // Gateway instance to be used for creating transactions
      req.gateway = gateway

      // a reference to the braintree configuration, useful for processing options
      req.braintreeConfiguration = document.braintree || {}
      next()
    })
}

router.post('/clientToken', setupBraintreeGateway, function (req, res, next) {
  // Creo un nuovo clientToken e lo restituisco al client
  // Questo token viene usato dal client per interagire con la api di braintree
  // Ad esempio, serve per ottenere il nonce di transazione

  // TODO Double check if we can track marketcloud ids and braintree ids for customers
  /*
    var clientTokenOptions = {}
    if (req.client.access === 'user') {
      clientTokenOptions.customerId = req.client.user.id;
    }
  */

  req.gateway.clientToken.generate({}, function (err, response) {
    if (err) {
      console.log('Error generating the clientToken ', err)
      var error = new Errors.BadRequest('Impossible to generate the token due to an Authentication error Generated by Braintree. Make sure you are using the correct keys for the current braintree environment;')
      error.braintreeError = err
      next(error)
    } else {
      res.send({
        status: true,
        data: {
          clientToken: response.clientToken
        }
      })
    }
  })
})

/*
*   @api {get} /integrations/braintree Request Braintree integration status for the current application
*   @apiName GetIntegration
*   @apiGroup Braintree
*
*   @apiSuccessExample {json} Success-Response:
*   {
*     "isActive" : true,
*     "environment": "sandbox"
*   }
*
*/
router.get('/', Utils.fetchApplicationIntegrations, function (req, res, next) {
  if (!req.integrationsData.hasOwnProperty('braintree')) {
    return next(new Errors.NotFound('The Integration "Braintree" is not installed. You can install this application using the dashboard.'))
  }

  // We don't leak sensitive data, only state of the integration.
  var braintreeIntegrationData = {
    environment: req.integrationsData.braintree.environment,
    isActive: req.integrationsData.braintree.isActive
  }

  if (req.integrationsData.braintree.autoSubmitForSettlement) { braintreeIntegrationData.autoSubmitForSettlement = req.integrationsData.braintree.autoSubmitForSettlement } else {
    braintreeIntegrationData.autoSubmitForSettlement = false
  }

  return res.send({
    status: true,
    data: braintreeIntegrationData
  })
})

router.post('/transactions/sale', setupBraintreeGateway, function (req, res, next) {
  var mongodb = req.app.get('mongodb')

  if (!req.body.hasOwnProperty('order_id')) { return next(new Errors.BadRequest('Missing required property "order_id".')) }

  mongodb.collection('orders')
    .findOne({
      application_id: req.client.application_id,
      id: Number(req.body.order_id)
    }, function (err, orderDocument) {
      if (err) {
        return next(err)
      }

      if (orderDocument === null) {
        return res.status(404).send({
          status: false,
          errors: [new Errors.NotFound('Cannot find order with id ' + req.body.order_id)]
        })
      }

      var amount = orderDocument.total

      // The nonce is obtained on the client
      // using Braintree's client libraries.
      // We use this nonce to validate the transaction
      if (typeof req.body.nonce !== 'string') {
        return next(new Errors.BadRequest('Braintree nonce must be string'))
      }

      var nonce = null

      function isJSON (str) {
        try {
          JSON.parse(str)
        } catch (e) {
          return false
        }
        return true
      }

      if (req.body.nonce.indexOf('fake-') === 0) {
        // Then its a testing nonce, we let them test :)
        nonce = req.body.nonce
      } else {
        // Then it's a real nonce, we must convert it.

        // If its json, the nonce is the one returned by
        // onPaymentMethodReceived
        // Altrimenti consideriamo come nonce la stringa
        if (isJSON(req.body.nonce)) {
          nonce = JSON.parse(req.body.nonce).nonce
        } else {
          nonce = req.body.nonce
        }
      }

      var transactionPayload = {
        amount: amount,
        paymentMethodNonce: nonce,
        orderId: orderDocument.id,
        options: {}
      }

      // Checking for some common braintree options
      if (req.braintreeConfiguration.autoSubmitForSettlement === true) {
        transactionPayload.options.submitForSettlement = true
      }

      // Invoking braintree's sale
      req.gateway.transaction.sale(transactionPayload, function (braintreeError, result) {
        if (result !== null && result.success === true) {
          // We want to support multiple payments to the same order
          // because we want to show also failed payments
          // and sometimes payments just get splitted in two.
          // For this reason we create new payment objects every time and push them into the order
          var newPayment = {
            method: 'Braintree',
            created_at: new Date(),
            amount: orderDocument.total,
            description: 'Successful Braintree payment processed by Marketcloud for order #' + orderDocument.id,
            successful: true,
            data: result.transaction
          }

          if (orderDocument.payments) {
            orderDocument.payments.push(newPayment)
          } else { orderDocument.payments = [newPayment] }

          // Pagamento avvenuto con successo
          // Aggiorno l'ordine settando lo stato del pagamento e salvando i dati di transazione
          mongodb.collection('orders')
            .update({
              application_id: req.client.application_id,
              id: Number(req.body.order_id)
            }, {
              $set: {
                status: 'processing',
                payments: orderDocument.payments
              }
            },
            function (err) {
              if (err) {
                return next(err)
              }

              // We emit the orders.paid and payments.create event
              var queue = req.app.get('mail-queue')

              var message = {
                type: 'orders.update.processing',
                resource_id: req.body.order_id,
                application: req.client.application
              }

              queue
                .sendToQueue('marketcloud-mail', message)
                .then(function () {
                  return console.log('Message enqueued to Mail queue correctly')
                }).catch(function (err) {
                  return console.log('Message was not enqueued to Mail service', err)
                })

              res.send({
                status: true,
                data: result.transaction,
                _embedded: {
                  order: orderDocument
                }
              })
            })
        } else {
          var _error = new Errors.BadRequest('Braintree transaction error. See object for more details.')
          _error.Braintree = {}
          _error.Braintree.transactionErrors = result.errors.deepErrors()
          _error.Braintree.transaction = result.transaction
          _error.Braintree.gatewayErrors = braintreeError

          var newFailedPayment = {
            method: 'Braintree',
            created_at: new Date(),
            amount: orderDocument.total,
            description: 'Failed Braintree payment processed by Marketcloud for order #' + orderDocument.id,
            successful: false,
            error: _error.Braintree
          }

          if (orderDocument.payments) { orderDocument.payments.push(newFailedPayment) } else {
            orderDocument.payments = [newFailedPayment]
          }

          mongodb.collection('orders')
            .update({
              application_id: req.client.application_id,
              id: Number(req.body.order_id)
            }, {
              $set: {
                status: 'failed',
                payments: orderDocument.payments
              }
            },
            function (err) {
              if (err) {
                return next(err)
              }

              return next(_error)
            })
        }
      })
    })
})

module.exports = router
